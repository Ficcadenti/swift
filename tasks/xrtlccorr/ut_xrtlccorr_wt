#!/usr/bin/perl
#
#  ut_xrtlccorr_wt
#
#
#
# Changes:
#           0.1.0 - 04/08/2004 - CS First working version
#           0.1.1 - 15/02/2006 - BS Adapted for xrtlccorr task
#           0.1.2 - 10/03/2006 - BS Changed input instrument map
#           0.1.3 - 27/04/2007 - NS Added new input parameter 'regionfile'
#                              -    Adapted for WT
#           0.1.4 - 19/03/2008 -    Added new input parameters and Dataset
#           0.1.5 - 06/10/2008 -    Removed nframe input parameter and added wtnframe and pcnframe parameters
#

use strict;
use ut_xrtobj;

# main
{
# Object Istances
    my $ut = ut_xrtobj->new(
			    name    => "xrtlccorr",
			    utname  => "ut_xrtlccorr_wt",
			    version => "0.1.5",
			    );
    
# Set Parameter
    #$ut->setParam("validate", 0);
    my $input = $ut->getParam("input_dir");
    my $output = $ut->getParam("output_dir") . "/" . $ut->getParam("utname");
    $ut->setParam("output_dir",$output);
    my $chat = $ut->getParam("chatter");
    my $clobber = $ut->getParam("clobber");
    
# I/O Directory Check
    $ut->checkIODirectory()
        if $ut->isValid;

# Environment check
    my @chk_env = ("LHEASOFT", "HEADAS", "CALDB");

    $ut->checkEnvironment(@chk_env)
        if $ut->isValid;
    
    my $ArchDir="ut_xrtlccorr_wt";
    
    
# Input Files Check
    my @chk_inp = ("$input/$ArchDir/sw00261299000xwtw2po_cl.evt.gz",
		   "$input/$ArchDir/sw00261299000xwtw2posr.lc",
		   "$input/$ArchDir/sw00261299000xhd.hk.gz",
		   "$input/$ArchDir/sw00261299000sat.fits.gz",
		   );

    $ut->checkExist("Input", @chk_inp)
	if $ut->isValid;
    
# Prototype Check
   my @chk_proto = ("$input/$ArchDir/ut_xrtlccorr_wt_xwtw2posrcorr.lc", 
		    "$input/$ArchDir/ut_xrtlccorr_wt_xwtcorr.fits",
		    "$input/$ArchDir/ut_xrtlccorr_wt_rawinstr.img");

    $ut->checkExist("Prototype", @chk_proto)
        if $ut->isValid;

# Executables Files Check
    my @chk_exe = ("xrtlccorr","ftdiff","fverify", "pquery2");
    $ut->checkExecutable(@chk_exe)
        if $ut->isValid;
# Task Files Check
    my %par_task = (

		    lcfile         => "$input/$ArchDir/sw00261299000xwtw2posr.lc",
		    regionfile     => "NONE",
		    outfile        => "$output/sw00261299000xwtw2posr_corr.lc",
		    corrfile       => "$output/sw00261299000xwtw2posr_corrfact.fits",
		    teldef         => "CALDB",
		    aberration     => "no",
		    attinterpol    => "no",
		    attfile        => "$input/$ArchDir/sw00261299000sat.fits.gz",
                    srcx           => -1,
		    srcy           => -1,
		    psffile        => "CALDB",
		    psfflag        => "yes",
		    energy         => 1.5,
		    createinstrmap => "yes",
		    outinstrfile   => "$output/sw00261299000xwtw2posr_rawinstr.img",
		    infile         => "$input/$ArchDir/sw00261299000xwtw2po_cl.evt.gz",
		    hdfile         => "$input/$ArchDir/sw00261299000xhd.hk.gz",
		    fovfile        => "CALDB",
		    wtnframe       => 0,
		    pcnframe       => 0,
		    chatter        => $chat,
		    clobber        => "$clobber",
		    history        => "yes" 
		    );

    $ut->runTask(%par_task)
	if $ut->isValid;
    if($ut->isValid)
    {
	
# fverify
	$ut->fverify("$output/sw00261299000xwtw2posr_corr.lc");
	$ut->fverify("$output/sw00261299000xwtw2posr_corrfact.fits");
	$ut->fverify("$output/sw00261299000xwtw2posr_rawinstr.img");	

# ftdiff
	$ut->ftdiff("$output/sw00261299000xwtw2posr_corr.lc",
		    "$input/$ArchDir/ut_xrtlccorr_wt_xwtw2posrcorr.lc");

	$ut->ftdiff("$output/sw00261299000xwtw2posr_corrfact.fits",
		    "$input/$ArchDir/ut_xrtlccorr_wt_xwtcorr.fits");

	$ut->ftdiff("$output/sw00261299000xwtw2posr_rawinstr.img",
		    "$input/$ArchDir/ut_xrtlccorr_wt_rawinstr.img");

    }    
    
    $ut->delete();
}
