#!/usr/bin/perl
#
#  ut_xrtALL
#
#
#
# Changes:
#           0.1.0 - RP 06/08/2004 - RP First working version
#           0.1.1 - RP 10/08/2004 - Bug fixed
#           0.1.2 - RP 10/08/2004 - Change final report
#           0.1.3 - BS 31/08/2004 - Added check on enviroment variable set
#           0.1.4 - BS 13/01/2005 - Deleted 'caldbdir' input parameter
#           0.1.5 - BS 10/06/2005 - Added new task
#           0.1.6 - BS 10/10/2005 - Added 'xrtexpomap' task
#           0.1.7 - BS 14/02/2006 - Added 'xrttdrss2' task
#           0.1.8 - BS 27/02/2006 - Replace ut_xrtexpomap with 
#                                   ut_xrtexpomap_wt and ut_xrtexpomap_pc
#           0.1.9 - BS 09/03/2006 - Added 'xrtlccorr' task
#           0.2.0 - NS 30/04/2007 - Replace ut_xrtlccorr with
#                                   ut_xrtlccorr_wt and ut_xrtlccorr_pc
#                                 - Added 'xrtpccorr' task
#           0.2.1 - NS 07/05/2008 - Added 'xrtgrblc' task
#           0.2.2 - NS 09/10/2008 - Added 'xrtgrblcspec' task
#           0.2.3 - NS 30/04/2009 - Added 'xrtphascorr' task
#

use strict;
use ut_xrtobj;
{

# Object Istances
    my $ut = ut_xrtobj->new(
			    name    => "ut_xrtALL",
			    utname  => "ut_xrtALL",
			    version => "0.2.3",
			    );
    
# Set Parameter
    my $input = $ut->getParam("input_dir");
    my $output = $ut->getParam("output_dir");
    
    my $chat = $ut->getParam("chatter");
    my $clobber = $ut->getParam("clobber");
    

# I/O Directory Check
    $ut->checkIODirectory()
        if $ut->isValid;

# Environment check
    my @chk_env = ("LHEASOFT", "HEADAS", "CALDB");

    $ut->checkEnvironment(@chk_env)
        if $ut->isValid;

    my @command = (
		    "ut_xrtcalcpi_pc",   
		    "ut_xrtcalcpi_pu",
		    "ut_xrtcalcpi_wt",
		    "ut_xrtcentroid_im",
		    "ut_xrtcentroid_pc",
		    "ut_xrtevtrec_pu",
		    "ut_xrtevtrec_wt",
		    "ut_xrtfilter",
		    "ut_xrtflagpix_pc",
		    "ut_xrtflagpix_wt",
		    "ut_xrthkproc",
		    "ut_xrthotpix",
		    "ut_xrtimage",
		    "ut_xrtmkarf_lr",
		    "ut_xrtmkarf_pc",
		    "ut_xrtmkarf_pu",
		    "ut_xrtmkarf_wt",
		    "ut_xrtpcgrade",
		    "ut_xrtpdcorr_lr",
		    "ut_xrtpdcorr_pu",
		    "ut_xrtpipeline_im",
		   "ut_xrtpipeline_lr",
		   "ut_xrtpipeline_pc",
		   "ut_xrtpipeline_pu",
		   "ut_xrtpipeline_wt",
		   "ut_xrtproducts_lr",
		   "ut_xrtproducts_pc",
		   "ut_xrtproducts_wt",
		   "ut_xrtscreen_im",
		   "ut_xrtscreen_pc",
		   "ut_xrttam",
		   "ut_xrttdrss",
		   "ut_xrttimetag_lr",
		   "ut_xrttimetag_wt",
		   "ut_xrtwtcorr",
		   "ut_xrtexpomap_pc",
		   "ut_xrtexpomap_wt",
		   "ut_xrttdrss2",
		   "ut_xrtlccorr_wt",
		   "ut_xrtlccorr_pc",
		   "ut_xrtpccorr",
		   "ut_xrtgrblc",
		   "ut_xrtgrblcspec",
		   "ut_xrtphascorr",
		   );
   
     
    $ut->checkExecutable(@command)
    if $ut->isValid;

    my $emptystr = "                    ";

    my ($status,@listcmd,$cmd);

    my $strcmd = "$input $output";

    if ($chat ne "") { $strcmd .= " chatter=$chat";}
    if ($clobber ne "") { $strcmd .= " clobber=$clobber";}
    
    my $len = 20 + length($strcmd);

    my $c;
    my $i;
    if ($ut->isValid) {
	foreach $cmd (@command) {
#	for ($i=0; $i < 1; $i++) {
#	    $cmd = $command[$i];

	    $c = "$cmd $strcmd";
	    print "$c\n";
		    
	    $status = system("$cmd $strcmd");
	    # use constant STATUS_WARNING        => 8192; (ut_xrtobj.pm)

#	    print "\n\n\n\n\n\n Eseguio $cmd $strcmd\n\n\n\n";
#	    print "Status $status\n\n\n";

	    if (($status == 2) || ($status == 512)) {
		push @listcmd,substr($c . $emptystr,0,$len) .": warnings";
	    } elsif ($status !=0) {
		push @listcmd,substr($c . $emptystr,0,$len) . ": failed";
		$ut->setParam("status", 256);
	    } else {
		push @listcmd,substr($c . $emptystr,0,$len) .": success";
	    }

	}
	
    }

    print "-------------------------------------------------------------------------------------\n";
    print "-    REPORT ut_xrtALL   version: " . $ut->getParam("version"). "                    -\n";
    $ut->printInitInfo();

    foreach $cmd (@listcmd) {
	print "$cmd\n";
    }



    $ut->delete();
}
