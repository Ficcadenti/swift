#!/usr/bin/perl
#
#  ut_xrtproducts_lr
#
#
#
# Changes:
#           0.1.0 - 04/08/2004 - CS First working version
#           0.1.1 - 05/08/2004 - MC Modified for this task
#           0.1.2 - 11/08/2004 - BS Bug fixed
#           0.1.3 - 13/01/2005 - BS Deleted 'caldbdir' input parameter
#           0.1.4 - 16/02/2005 - BS Added 'inarffile' input parameter
#           0.1.5 - 24/03/2005 - BS Replaced xspec with xspec11 
#           0.1.6 - 19/10/2005 - BS Added 'expofile' input parameter
#           0.1.7 - 10/03/2006 - BS Changed input dataset
#           0.1.8 - 21/07/2009 - NS Replaced xspec11 with xspec
#           0.1.9 - 08/06/2014 - NS Added 'bkgextract' input parameter
#                                   Added 'correctlc' input parameter

use strict;
use ut_xrtobj;

# main
{
# Object Istances
    my $ut = ut_xrtobj->new(
			    name    => "xrtproducts",
			    utname  => "ut_xrtproducts_lr", 
			    version => "0.1.9",
			    );
    
# Set Parameter
    #$ut->setParam("validate", 0);
    my $input = $ut->getParam("input_dir");
    my $output = $ut->getParam("output_dir")."/".$ut->getParam("utname");
    $ut->setParam("output_dir",$output);
    my $chat = $ut->getParam("chatter");
    my $clobber = $ut->getParam("clobber");

# I/O Directory Check
    $ut->checkIODirectory()
        if $ut->isValid;

# Environment check
    my @chk_env = ("LHEASOFT", "HEADAS", "CALDB");

    $ut->checkEnvironment(@chk_env)
        if $ut->isValid;
    

    my $headas=$ENV{'HEADAS'};
    my $ArchDir="ut_xrtproducts";
    
    
# Input Files Check
    my @chk_inp = ("$input/$ArchDir/sw00060011017xlrb1po_cl.evt.gz");

    $ut->checkExist("Input", @chk_inp)
	if $ut->isValid;
    
# Prototype Check
   my @chk_proto = ("$input/$ArchDir/ut_xrtproducts_lr.pha",
                    "$input/$ArchDir/ut_xrtproducts_lr.lc",
		    "$input/$ArchDir/ut_xrtproducts_lr.arf"
		    );
    $ut->checkExist("Prototype", @chk_proto)
        if $ut->isValid;

# Executables Files Check
    my @chk_exe = ("xrtproducts","fstatistic","xrtmkarf","xspec","lcurve",
		   "xselect","ximage","ftdiff","fverify", "pquery2");
    $ut->checkExecutable(@chk_exe)
        if $ut->isValid;
# Task Files Check
    my %par_task = (
		    infile     => "$input/$ArchDir/sw00060011017xlrb1po_cl.evt.gz",
		    outdir     => "$output",
		    stemout    => "DEFAULT",
                    bkgextract => "no",
                    binsize    => 1.,
                    display    => "no",
                    lcfile     => "DEFAULT",
		    phafile    => "DEFAULT",
		    gtifile    => "NONE",
                    arffile    => "DEFAULT",
		    inarffile  => "CALDB",
		    expofile   => "NONE",
                    rmffile    => "CALDB",
		    psffile    => "CALDB",
		    vigfile    => "CALDB",
		    psfflag    => "yes",
		    plotdevice => "gif",
		    pilow      => 20,
		    pihigh     => 1000,
		    correctlc  => "no",
		    clobber    => "$clobber",
		    chatter    => $chat,
		    history    => "yes",
		    cleanup    => "yes",
		    );



    $ut->runTask(%par_task)
	if $ut->isValid;
    
# fverify
    if ($ut->isValid) {
	$ut->fverify("$output/sw00060011017xlrb1posr.pha");
	$ut->fverify("$output/sw00060011017xlrb1posr.lc");
	$ut->fverify("$output/sw00060011017xlrb1posr.arf");
	
	
# ftdiff
	$ut->ftdiff("$output/sw00060011017xlrb1posr.pha",
		    "$input/$ArchDir/ut_xrtproducts_lr.pha");
	$ut->ftdiff("$output/sw00060011017xlrb1posr.lc",
		    "$input/$ArchDir/ut_xrtproducts_lr.lc");
	$ut->ftdiff("$output/sw00060011017xlrb1posr.arf",
		    "$input/$ArchDir/ut_xrtproducts_lr.arf");
	
    }   
    $ut->delete();
}
