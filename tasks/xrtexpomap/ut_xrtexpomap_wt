#!/usr/bin/perl
#
#  ut_xrtexpomap
#
#
#
# Changes:
#           0.1.0 - 04/08/2004 - CS First working version
#           0.1.1 - 10/10/2005 - BS Adapted for xrtexpomap task
#           0.1.2 - 31/10/2005 -    replaced outfile parameter with stemout
#           0.1.3 - 10/11/2005 -    Changed input filename
#           0.1.4 - 11/11/2005 -    Modified stemout input parameter set
#           0.1.5 - 15/02/2006 -    Added check on prototypes
#           0.1.6 - 21/02/2006 -    Modified prototype filename 
#           0.1.7 - 24/02/2006 -    Changed dataset
#           0.1.8 - 27/02/2006 -    Adapted for WT
#           0.1.9 - 19/04/2007 - NS Changed dataset
#           0.2.0 - 23/05/2007 -    Added 'checkattitude' input parameter
#           0.2.1 - 28/03/2008 -    Adapted for xrtexpomap task
#           0.2.2 - 18/06/2014 -    Replaced 'nframe' input parameter with 'pcnframe' and 'wtnframe'

use strict;
use ut_xrtobj;

# main
{
# Object Istances
    my $ut = ut_xrtobj->new(
			    name    => "xrtexpomap",
			    utname  => "ut_xrtexpomap_wt",
			    version => "0.2.2",
			    );
    
# Set Parameter
    #$ut->setParam("validate", 0);
    my $input = $ut->getParam("input_dir");
    my $output = $ut->getParam("output_dir") . "/" . $ut->getParam("utname");
    $ut->setParam("output_dir",$output);
    my $chat = $ut->getParam("chatter");
    my $clobber = $ut->getParam("clobber");
    
# I/O Directory Check
    $ut->checkIODirectory()
        if $ut->isValid;

# Environment check
    my @chk_env = ("LHEASOFT", "HEADAS", "CALDB");

    $ut->checkEnvironment(@chk_env)
        if $ut->isValid;
    
    my $ArchDir="ut_xrtexpomap";
    
    
# Input Files Check
    my @chk_inp = ("$input/$ArchDir/sw00180455007xwtw2po_cl.evt",
		   "$input/$ArchDir/sw00180455007xhdtc.hk.gz",
		   "$input/$ArchDir/sw00180455007sat.fits.gz",
		   );

    $ut->checkExist("Input", @chk_inp)
	if $ut->isValid;
    
# Prototype Check
   my @chk_proto = ("$input/$ArchDir/ut_xrtexpomap_xwtw2po_ex.img.gz",
		    "$input/$ArchDir/ut_xrtexpomap_xwtw2po_rawinstr.img.gz",
		    "$input/$ArchDir/ut_xrtexpomap_xwtw2po_skyinstr.img.gz",
		    "$input/$ArchDir/ut_xrtexpomap_xwtw2po_sumskyinstr.img.gz" );

    $ut->checkExist("Prototype", @chk_proto)
        if $ut->isValid;

# Executables Files Check
    my @chk_exe = ("xrtexpomap","xrtinstrmap", "xrtexpocalc", "xrtexpocorr","swiftxform", "ximage","ftdiff","fverify", "pquery2");
    $ut->checkExecutable(@chk_exe)
        if $ut->isValid;
# Task Files Check
    my %par_task = (

		    infile     => "$input/$ArchDir/sw00180455007xwtw2po_cl.evt",
		    hdfile     => "$input/$ArchDir/sw00180455007xhdtc.hk.gz",
		    attfile    => "$input/$ArchDir/sw00180455007sat.fits.gz",
		    stemout    => "default",
                    fovfile  => "CALDB",
		    vigfile  => "CALDB",
		    vigflag  => "yes",
		    energy   => 1.5,
		    pcnframe => 0,
		    wtnframe => 0,
		    checkattitude => "no",
		    outdir   => $output,
		    teldef   => "CALDB",
                    cleanup  => "no",
		    chatter    => $chat,
		    clobber    => "$clobber",
		    history    => "yes" 
		    );

    $ut->runTask(%par_task)
	if $ut->isValid;
    if($ut->isValid)
    {
	
# fverify
	$ut->fverify("$output/sw00180455007xwtw2po_ex.img");
	$ut->fverify("$output/sw00180455007xwtw2po_rawinstr.img.gz");
	$ut->fverify("$output/sw00180455007xwtw2po_skyinstr.img.gz");
	$ut->fverify("$output/sw00180455007xwtw2po_sumskyinstr.img.gz");

	
	
	
# ftdiff
	$ut->ftdiff("$output/sw00180455007xwtw2po_ex.img",
		    "$input/$ArchDir/ut_xrtexpomap_xwtw2po_ex.img.gz");

	$ut->ftdiff("$output/sw00180455007xwtw2po_rawinstr.img.gz", "$input/$ArchDir/ut_xrtexpomap_xwtw2po_rawinstr.img.gz");

	$ut->ftdiff("$output/sw00180455007xwtw2po_skyinstr.img.gz", "$input/$ArchDir/ut_xrtexpomap_xwtw2po_skyinstr.img.gz");

	$ut->ftdiff("$output/sw00180455007xwtw2po_sumskyinstr.img.gz", "$input/$ArchDir/ut_xrtexpomap_xwtw2po_sumskyinstr.img.gz");


    }
    
    $ut->delete();
}
