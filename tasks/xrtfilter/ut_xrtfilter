#!/usr/bin/perl
#
#  ut_xrtfilter
#
#
#
# Changes:
#           0.1.0 - 04/08/2004 - CS First working version
#           0.1.1 - 05/08/2004 -    Adapted for xrtfilter task
#           0.1.2 - 11/01/2005 - BS Deleted 'caldbdir' input parameter
#           0.1.3 - 21/01/2005 - BS Replaced xrtpreconf.txt ASCII file 
#                                   with "CALDB"
#           0.1.4 - 10/02/2005 - FT added 'nonulls' input parameter
#           0.1.5 - 09/03/2006 - BS added 'gtiexpr' input parameter
#           0.1.6 - 09/11/2007 - NS Added 'enfile' input parameter
#                              -    Changed dataset
#           0.1.7 - 28/03/2008 - NS Changed ftdiff call for mkffile
#           0.1.8 - 08/05/2008 - NS Deleted 'tprec' input parameter

use strict;
use ut_xrtobj;

# main
{
# Object Istances
    my $ut = ut_xrtobj->new(
			    name    => "xrtfilter",
			    utname  => "ut_xrtfilter",
			    version => "0.1.8",
			    );
    
# Set Parameter
    #$ut->setParam("validate", 0);
    my $input = $ut->getParam("input_dir");
    my $output = $ut->getParam("output_dir") . "/" . $ut->getParam("utname");
    $ut->setParam("output_dir",$output); 
    my $chat = $ut->getParam("chatter");
    my $clobber = $ut->getParam("clobber");


# I/O Directory Check
    $ut->checkIODirectory()
        if $ut->isValid;

# Environment check
    my @chk_env = ("LHEASOFT", "HEADAS", "CALDB");

    $ut->checkEnvironment(@chk_env)
        if $ut->isValid;
    

    my $headas=$ENV{'HEADAS'};
    my $ArchDir="ut_xrtfilter";
    
    
# Input Files Check
    my @chk_inp = ("$input/$ArchDir/sw00030791025xhdtc.hk",
		   "$input/$ArchDir/sw00030791025sat.fits.gz",
		   "$input/$ArchDir/sw00030791025sen.hk.gz",
		   "$headas/refdata/SWIFT_TLE_ARCHIVE.txt",
		   "$headas/refdata/leapsec.fits",
		   "$headas/refdata/rigidity.data");

    $ut->checkExist("Input", @chk_inp)
	if $ut->isValid;
    
# Prototype Check
   my @chk_proto = ("$input/$ArchDir/ut_xrtfilter.attorb",
                    "$input/$ArchDir/ut_xrtfilter.mkf",
		    );
    $ut->checkExist("Prototype", @chk_proto)
        if $ut->isValid;

# Executables Files Check
    my @chk_exe = ("xrtfilter","prefilter","ftchecksum","makefilter","ftdiff","fverify", "pquery2");
    $ut->checkExecutable(@chk_exe)
        if $ut->isValid;
# Task Files Check
    my %par_task = (
		    hdfile        => "$input/$ArchDir/sw00030791025xhdtc.hk",
		    enfile        => "$input/$ArchDir/sw00030791025sen.hk.gz",
		    outdir        => "$output",
		    nonulls       => "yes",
		    chatter       => $chat,
		    clobber       => "$clobber",
		    history       => "yes", 
		    attfile       => "$input/$ArchDir/sw00030791025sat.fits.gz",
		    alignfile     => "none",
		    outfile       => "DEFAULT",
                    outcols       => "CALDB",
		    orbmode       => "TLE_TEXT2", 
		    orbfile       => "$headas/refdata/SWIFT_TLE_ARCHIVE.txt",
		    leapfile      => "$headas/refdata/leapsec.fits",
                    rigfile       => "$headas/refdata/rigidity.data",
                    origin        => "NASA/GSFC",
                    interval      => 1,
		    ranom         => 0.,
                    decnom        => 0.,
		    mkfconfigfile => "CALDB",
                    configfile    => "NONE",
                    hdstem        => "NONE",
                    mkffile       => "DEFAULT",
		    gtiexpr       => "NONE",
		    );
    $ut->runTask(%par_task)
	if $ut->isValid;
    
# fverify
    if ($ut->isValid)
    {
	$ut->fverify("$output/sw00030791025s.attorb");
	
	$ut->fverify("$output/sw00030791025s.mkf");
        
	
# ftdiff
	$ut->ftdiff("$output/sw00030791025s.attorb",
		    "$input/$ArchDir/ut_xrtfilter.attorb");
	
	$ut->ftdiff_mkf("$output/sw00030791025s.mkf",
			"$input/$ArchDir/ut_xrtfilter.mkf");
    }
   
    $ut->delete();
}
